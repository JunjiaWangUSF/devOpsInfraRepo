name: Promote RC
on:
  repository_dispatch:
    types: [promote-rc]

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Extract RC Version
        run: |
          echo "RC_VERSION=${{ github.event.client_payload.rc_version }}" >> $GITHUB_ENV
          echo "TARGET_TAG=${RC_VERSION#rc}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start services
        run: docker-compose up -d
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_PORT: ${{ secrets.DB_PORT }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Wait for MySQL to be ready
        run: sleep 20

      - name: Check service status
        run: docker-compose ps

      - name: Capture backend logs
        run: docker-compose logs backend

      - name: Query database
        run: docker exec devopsinfrarepo_mysql_1 mysql -h mysql -P 3306 -u root -ppassword -e "USE weightTracker; SELECT * FROM weights;"

      - name: Run tests
        env:
          DB_HOST: mysql
          DB_USER: root
          DB_PASSWORD: password
          DB_DATABASE: weightTracker
          DB_PORT: 3306
        run: docker exec devopsinfrarepo_backend_1 npm test

      - name: Stop services
        run: docker-compose down

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push frontend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Retag frontend Image
        run: |
          docker pull $ECR_REPO:latest
          docker tag $ECR_REPO:latest $ECR_REPO:${{ env.RC_VERSION }}
          docker push $ECR_REPO:${{ env.RC_VERSION }}
        env:
          ECR_REPO: 377816764053.dkr.ecr.us-east-1.amazonaws.com/frontend

      - name: Retag backend Image
        run: |
          docker pull $ECR_REPO:latest
          docker tag $ECR_REPO:latest $ECR_REPO:${{ env.RC_VERSION }}
          docker push $ECR_REPO:${{ env.RC_VERSION }}
        env:
          ECR_REPO: 377816764053.dkr.ecr.us-east-1.amazonaws.com/backend

      - name: Extract and Sanitize RC Version
        run: |
          # Convert rc1.0.2-rc.1 to rc1-0-2-rc-1
          SANITIZED_VERSION=$(echo "${{ github.event.client_payload.rc_version }}" | tr '.' '-' | sed 's/rc-/rc/g')
          echo $SANITIZED_VERSION
          echo "RC_VERSION=$SANITIZED_VERSION" >> $GITHUB_ENV
          echo "SUBDOMAIN=${SANITIZED_VERSION}.junjiawangusf.live" >> $GITHUB_ENV

          - name: Deploy to EC2
          run: |
            ssh -o StrictHostKeyChecking=no -i keys/2_26_2025.pem ubuntu@ec2-54-88-57-107.compute-1.amazonaws.com << EOF
            # Create unique network
            docker network create rc-${RC_VERSION} || true

            # Stop and remove existing containers
            docker stop frontend-${RC_VERSION} backend-${RC_VERSION} || true
            docker rm frontend-${RC_VERSION} backend-${RC_VERSION} || true

            # Start containers with unique network
            docker run -d \
              --name backend-${RC_VERSION} \
              --network rc-${RC_VERSION} \
              -p 8081:8080 \
              ${{ secrets.ECR_BACKEND }}:${RC_VERSION}

            docker run -d \
              --name frontend-${RC_VERSION} \
              --network rc-${RC_VERSION} \
              -p 8001:8000 \
              -e REACT_APP_API_URL=http://backend-${RC_VERSION}:8080/api \
              ${{ secrets.ECR_FRONTEND }}:${RC_VERSION}

            # Generate Nginx config from template
            sudo bash -c "sed -e 's/{{SUBDOMAIN}}/${SUBDOMAIN}/g' \
                              -e 's/{{FRONTEND_PORT}}/8001/g' \
                              -e 's/{{BACKEND_PORT}}/8081/g' \
                              /etc/nginx/templates/rc-template.conf > \
                              /etc/nginx/sites-available/${SUBDOMAIN}.conf"

            # Enable site
            sudo ln -sf /etc/nginx/sites-available/${SUBDOMAIN}.conf \
                       /etc/nginx/sites-enabled/
            
            # Reload Nginx with existing wildcard cert
            sudo nginx -t && sudo systemctl reload nginx
            EOF
          env:
            RC_VERSION: ${{ env.RC_VERSION }}
            SUBDOMAIN: ${{ env.SUBDOMAIN }}
