name: Promote RC
on:
  repository_dispatch:
    types: [promote-rc]

jobs:
  promote:
    runs-on: ubuntu-latest
    environment: production
    concurrency:
      group: rc-deployment
      cancel-in-progress: true

    steps:
      - name: Extract RC Version
        run: |
          echo "RC_VERSION=${{ github.event.client_payload.rc_version }}" >> $GITHUB_ENV
          echo "TARGET_TAG=${RC_VERSION#rc}" >> $GITHUB_ENV

      - name: Extract and Sanitize RC Version
        run: |
          # Convert rc1.0.2-rc.1 to rc1-0-2-rc-1
          SANITIZED_VERSION=$(echo "${{ github.event.client_payload.rc_version }}" | tr '.' '-' | sed 's/rc-/rc/g')
          echo "RC_VERSION=$SANITIZED_VERSION" >> $GITHUB_ENV
          echo "SUBDOMAIN=${SANITIZED_VERSION}.junjiawangusf.live" >> $GITHUB_ENV
          echo  SUBDOMAIN

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: backend
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.RC_VERSION }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.RC_VERSION }}

      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: frontend
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.RC_VERSION }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.RC_VERSION }}

      - name: Use private key
        run: |
          chmod 400 keys/2_26_2025.pem

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i keys/2_26_2025.pem ubuntu@ec2-54-88-57-107.compute-1.amazonaws.com << EOSSH
          # Cleanup previous deployment
          docker rm -f frontend-${{ env.RC_VERSION }} backend-${{ env.RC_VERSION }} 2>/dev/null || true
          docker network rm rc-${{ env.RC_VERSION }} 2>/dev/null || true

          # Login to ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

          # Pull images with sanitized tag
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:${{ env.RC_VERSION }}
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ env.RC_VERSION }}

          # Create network
          docker network create rc-${{ env.RC_VERSION }}

          # Start containers
          docker run -d \
            --name backend-${{ env.RC_VERSION }} \
            --network rc-${{ env.RC_VERSION }} \
            -p 8000:8000 \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:${{ env.RC_VERSION }}

          docker run -d \
            --name frontend-${{ env.RC_VERSION }} \
            --network rc-${{ env.RC_VERSION }} \
            -p 8080:3000 \
            -e REACT_APP_API_URL=http://backend-${{ env.RC_VERSION }}:8080/api \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ env.RC_VERSION }}

          # Nginx configuration
          sudo bash -c "sed -e 's/{{SUBDOMAIN}}/${{ env.SUBDOMAIN }}/g' \
                            /etc/nginx/templates/rc-template.conf > \
                            /etc/nginx/sites-available/${{ env.SUBDOMAIN }}.conf"

          sudo ln -sf /etc/nginx/sites-available/${{ env.SUBDOMAIN }}.conf \
                    /etc/nginx/sites-enabled/

          sudo systemctl daemon-reload
          sudo nginx -t && sudo systemctl restart nginx
          EOSSH
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
