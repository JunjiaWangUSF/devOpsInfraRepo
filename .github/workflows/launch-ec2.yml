name: Launch EC2 and Run Tests

on:
  push:
    branches:
      - main

jobs:
  launch-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List repository contents
        run: ls -R

      - name: Use private key
        run: chmod 400 keys/2_26_2025.pem

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create temporary EC2 instance
        id: create-ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-04b4f1a9cf54c11d0 \
            --count 1 \
            --instance-type t2.medium \
            --key-name "2/26/2025" \
            --security-group-ids sg-00815fc516a8e3401 \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=TempInstance}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "::set-output name=instance_id::$INSTANCE_ID"
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "::set-output name=public_ip::$PUBLIC_IP"

      - name: Wait for EC2 Running
        run: aws ec2 wait instance-status-ok --instance-ids ${{ steps.create-ec2.outputs.instance_id }}

      - name: Transfer Docker Compose file and script to EC2 instance
        run: |
          scp -o StrictHostKeyChecking=no -i keys/2_26_2025.pem SmokeTest/docker-compose.yml ubuntu@${{ steps.create-ec2.outputs.public_ip }}:~
          scp -o StrictHostKeyChecking=no -i keys/2_26_2025.pem SmokeTest/script.sh ubuntu@${{ steps.create-ec2.outputs.public_ip }}:~

      - name: Install dependencies on EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no -i keys/2_26_2025.pem ubuntu@${{ steps.create-ec2.outputs.public_ip }} << 'EOF'
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo systemctl enable docker
          sudo systemctl start docker

          # Add ubuntu user to docker group
          sudo usermod -aG docker ubuntu

          # Install Python and AWS CLI
          sudo apt install -y python3  
          sudo apt install -y python3-pip
          sudo pip install awscli --break-system-packages

          if aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 377816764053.dkr.ecr.us-east-1.amazonaws.com; then
              echo "Docker login successful. Pulling images..."
              sudo docker-compose pull && echo "Images pulled successfully."
          else
              echo "Docker login failed."
              exit 1
          fi

            # Starting services with Docker Compose
          sudo docker-compose up -d
          # To ensure the group addition is recognized, you could attempt a new login session or just use sudo for docker commands
          EOF

      - name: Make script executable and run it
        run: |
          ssh -o StrictHostKeyChecking=no -i keys/2_26_2025.pem ubuntu@${{ steps.create-ec2.outputs.public_ip }} "chmod +x ~/script.sh && ~/script.sh"

      - name: Terminate temporary EC2 instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ steps.create-ec2.outputs.instance_id }}
          aws ec2 wait instance-terminated --instance-ids ${{ steps.create-ec2.outputs.instance_id }}
