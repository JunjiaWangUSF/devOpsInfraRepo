name: Launch EC2 and Run Tests

on:
  workflow_run:
    workflows: ["Nightly Build"]
    types:
      - completed

jobs:
  launch-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List repository contents
        run: ls -R

      - name: Use private key
        run: chmod 400 keys/2_26_2025.pem

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create temporary EC2 instance
        id: create-ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-04b4f1a9cf54c11d0 \
            --count 1 \
            --instance-type t2.medium \
            --key-name "2/26/2025" \
            --security-group-ids sg-00815fc516a8e3401 \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=TempInstance}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "::set-output name=instance_id::$INSTANCE_ID"
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "::set-output name=public_ip::$PUBLIC_IP"

      - name: Wait for EC2 Running
        run: aws ec2 wait instance-status-ok --instance-ids ${{ steps.create-ec2.outputs.instance_id }}

      - name: Get latest QA tag for frontend
        id: get-frontend-tag
        run: |
          QA_TAG=$(aws ecr list-images \
            --repository-name frontend \
            --filter "tagStatus=TAGGED" \
            --query 'imageIds[*].imageTag' \
            --output text | tr '\t' '\n' | grep '^QA-' | sort | tail -n 1)
          echo "Latest frontend QA tag: $QA_TAG"
          echo "FRONTEND_QA_TAG=$QA_TAG" >> $GITHUB_ENV

      - name: Get latest QA tag for authorization
        id: get-authorization-tag

        run: |
          QA_TAG=$(aws ecr list-images \
            --repository-name authorization \
            --filter "tagStatus=TAGGED" \
            --query 'imageIds[*].imageTag' \
            --output text | tr '\t' '\n' | grep '^QA-' | sort | tail -n 1)
          echo "Latest authorization QA tag: $QA_TAG"
          echo "AUTHORIZATION_QA_TAG=$QA_TAG" >> $GITHUB_ENV

      - name: Get latest QA tag for backend
        id: get-backend-tag
        run: |
          QA_TAG=$(aws ecr list-images \
            --repository-name backend \
            --filter "tagStatus=TAGGED" \
            --query 'imageIds[*].imageTag' \
            --output text | tr '\t' '\n' | grep '^QA-' | sort | tail -n 1)
          echo "Latest backend QA tag: $QA_TAG"
          echo "BACKEND_QA_TAG=$QA_TAG" >> $GITHUB_ENV

      - name: Replace image tags with latest QA tag
        run: |
          sed -i "s/frontend:latest/frontend:${{ env.FRONTEND_QA_TAG }}/g" SmokeTest/docker-compose.yml
          sed -i "s/backend:latest/backend:${{ env.BACKEND_QA_TAG }}/g" SmokeTest/docker-compose.yml
          sed -i "s/authorization:latest/authorization:${{ env.AUTHORIZATION_QA_TAG }}/g" SmokeTest/docker-compose.yml

      - name: Transfer Docker Compose file and script to EC2 instance
        run: |
          scp -o StrictHostKeyChecking=no -i keys/2_26_2025.pem SmokeTest/docker-compose.yml ubuntu@${{ steps.create-ec2.outputs.public_ip }}:~
          scp -o StrictHostKeyChecking=no -i keys/2_26_2025.pem SmokeTest/script.sh ubuntu@${{ steps.create-ec2.outputs.public_ip }}:~

      - name: Install dependencies on EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no -i keys/2_26_2025.pem ubuntu@${{ steps.create-ec2.outputs.public_ip }} << 'EOF'
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo systemctl enable docker
          sudo systemctl start docker

          # Add ubuntu user to docker group
          sudo usermod -aG docker ubuntu

          # Install Python and AWS CLI
          sudo apt install -y python3  
          sudo apt install -y python3-pip
          sudo pip install awscli --break-system-packages
          # Ensure .aws directory exists
          mkdir -p ~/.aws

          # Create or clear credentials file
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_session_token = ${{ secrets.AWS_SESSION_TOKEN }}" >> ~/.aws/credentials
          echo "region = ${{ secrets.AWS_REGION }}" >> ~/.aws/credentials

          if aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 377816764053.dkr.ecr.us-east-1.amazonaws.com; then
              echo "Docker login successful. Pulling images..."
              sudo docker-compose pull && echo "Images pulled successfully."
          else
              echo "Docker login failed."
              exit 1
          fi

            # Starting services with Docker Compose
          sudo docker-compose up -d
          # To ensure the group addition is recognized, you could attempt a new login session or just use sudo for docker commands
          EOF

      - name: Make script executable and run it
        run: |
          ssh -o StrictHostKeyChecking=no -i keys/2_26_2025.pem ubuntu@${{ steps.create-ec2.outputs.public_ip }} "chmod +x ~/script.sh && ~/script.sh"

      - name: Terminate temporary EC2 instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ steps.create-ec2.outputs.instance_id }}
          aws ec2 wait instance-terminated --instance-ids ${{ steps.create-ec2.outputs.instance_id }}

      - name: Retag and push QA images as RC
        if: success() # Only if all previous steps succeeded
        run: |
          RC_TAG=RC-$(date +"%Y%m%d-%H%M")

          # Retag and push for frontend
          aws ecr batch-get-image \
            --repository-name frontend \
            --image-ids imageTag=${{ env.FRONTEND_QA_TAG }} \
            --query 'images[].imageManifest' \
            --output text > frontend-manifest.json

          aws ecr put-image \
            --repository-name frontend \
            --image-tag $RC_TAG \
            --image-manifest file://frontend-manifest.json

          # Retag and push for backend
          aws ecr batch-get-image \
            --repository-name backend \
            --image-ids imageTag=${{ env.BACKEND_QA_TAG }} \
            --query 'images[].imageManifest' \
            --output text > backend-manifest.json

          aws ecr put-image \
            --repository-name backend \
            --image-tag $RC_TAG \
            --image-manifest file://backend-manifest.json

          # Retag and push for authorization
          aws ecr batch-get-image \
            --repository-name authorization \
            --image-ids imageTag=${{ env.AUTHORIZATION_QA_TAG }} \
            --query 'images[].imageManifest' \
            --output text > authorization-manifest.json

          aws ecr put-image \
            --repository-name authorization \
            --image-tag $RC_TAG \
            --image-manifest file://authorization-manifest.json
